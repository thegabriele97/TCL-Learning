#@ # 
#@ # Running pt_shell Version O-2018.06-SP4 for linux64 -- Nov 30, 2018
#@ # Date:   Thu Jul  1 12:55:54 2021
#@ # Run by: s281589@worksynthesis
#@ 

source /tools/synopsys_18/pts/O-2018.06-SP4/admin/setup/.synopsys_pt.setup
#@ # -- Starting source /tools/synopsys_18/pts/O-2018.06-SP4/admin/setup/.synopsys_pt.setup

#@ #
#@ # .synopsys_pt.setup: Initialization File for PrimeTime
#@ #
#@ 
#@ 
#@ #
#@ # Enable stack trace output on fatal.  Not available for all architectures.
#@ #
#@ if { $sh_arch == "sparcOS5" || $sh_arch == "hpux10" ||      $sh_arch == "hp32" || $sh_arch == "linux" } {
#@   set_unix_variable SYNOPSYS_TRACE ""
#@ }
#@ 
#@ #
#@ # Variable settings
#@ #
#@ 
#@ #
#@ # Synopsys strongly recommends that you use new variable message
#@ # tracing for debugging purposes only.
#@ #
#@ set sh_new_variable_message true
#@ 
#@ #
#@ # Synopsys strongly recommends that you uncomment the following command
#@ # in order to set sh_command_abbrev_mode to the value "Command-Line-Only".
#@ # Command abbreviation is intended as an interactive convenience.  Using
#@ # abbreviations in scripts can cause commands to fail in subsequent releases.
#@ # 
#@ #set sh_command_abbrev_mode "Command-Line-Only"
#@ 
#@ #
#@ # Some useful aliases
#@ #
#@ alias list_commands		help
#@ alias report_constraints	report_constraint
#@ alias report_clocks		report_clock
#@ 
#@ #
#@ # The alias for get_clock was added when get_clock_network_objects
#@ # was introduced, as it conflicts with get_clocks (and get_clock is a
#@ # typical abbreviation for get_clocks)
#@ #
#@ alias get_clock get_clocks
#@ 
#@ 
#@ #
#@ #
#@ # The alias of q to quit is commented out.  Remove the comment 
#@ # character if you want this alias.  Some users find that having 
#@ # this particular alias causes problems when mixed with page-mode
#@ # for reports - an accidental repeated 'q' not only cancels the
#@ # output but exits the tool.
#@ #
#@ #alias q quit
#@ 
#@ # -- End source /tools/synopsys_18/pts/O-2018.06-SP4/admin/setup/.synopsys_pt.setup

#@ # -- Starting source /tools/synopsys_18/pts/O-2018.06-SP4/auxx/tcllib/lib/itcl4.0.2/itcl.tcl

#@ #
#@ # itcl.tcl
#@ # ----------------------------------------------------------------------
#@ # Invoked automatically upon startup to customize the interpreter
#@ # for [incr Tcl].
#@ # ----------------------------------------------------------------------
#@ #   AUTHOR:  Michael J. McLennan
#@ #            Bell Labs Innovations for Lucent Technologies
#@ #            mmclennan@lucent.com
#@ #            http://www.tcltk.com/itcl
#@ # ----------------------------------------------------------------------
#@ #            Copyright (c) 1993-1998  Lucent Technologies, Inc.
#@ # ======================================================================
#@ # See the file "license.terms" for information on usage and
#@ # redistribution of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#@ 
#@ proc ::itcl::delete_helper { name args } {
#@     ::itcl::delete object $name
#@ }
#@ 
#@ # ----------------------------------------------------------------------
#@ #  USAGE:  local <className> <objName> ?<arg> <arg>...?
#@ #
#@ #  Creates a new object called <objName> in class <className>, passing
#@ #  the remaining <arg>'s to the constructor.  Unlike the usual
#@ #  [incr Tcl] objects, however, an object created by this procedure
#@ #  will be automatically deleted when the local call frame is destroyed.
#@ #  This command is useful for creating objects that should only remain
#@ #  alive until a procedure exits.
#@ # ----------------------------------------------------------------------
#@ proc ::itcl::local {class name args} {
#@     set ptr [uplevel [list $class $name] $args]
#@     uplevel [list set itcl-local-$ptr $ptr]
#@     set cmd [uplevel namespace which -command $ptr]
#@     uplevel [list trace variable itcl-local-$ptr u         "::itcl::delete_helper $cmd"]
#@     return $ptr
#@ }
#@ 
#@ # ----------------------------------------------------------------------
#@ # auto_mkindex
#@ # ----------------------------------------------------------------------
#@ # Define Itcl commands that will be recognized by the auto_mkindex
#@ # parser in Tcl...
#@ #
#@ 
#@ #
#@ # USAGE:  itcl::class name body
#@ # Adds an entry for the given class declaration.
#@ #
#@ foreach __cmd {itcl::class class itcl::type type ictl::widget widget itcl::widgetadaptor widgetadaptor itcl::extendedclass extendedclass} {
#@     auto_mkindex_parser::command $__cmd {name body} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@ 
#@ 	variable parser
#@ 	variable contextStack
#@ 	set contextStack [linsert $contextStack 0 $name]
#@ 	$parser eval $body
#@ 	set contextStack [lrange $contextStack 1 end]
#@     }
#@ }
#@ # -- Starting source /tools/synopsys_18/pts/O-2018.06-SP4/auxx/tcllib/lib/tcl8.6/auto.tcl

#@ # auto.tcl --
#@ #
#@ # utility procs formerly in init.tcl dealing with auto execution of commands
#@ # and can be auto loaded themselves.
#@ #
#@ # Copyright (c) 1991-1993 The Regents of the University of California.
#@ # Copyright (c) 1994-1998 Sun Microsystems, Inc.
#@ #
#@ # See the file "license.terms" for information on usage and redistribution of
#@ # this file, and for a DISCLAIMER OF ALL WARRANTIES.
#@ #
#@ 
#@ # auto_reset --
#@ #
#@ # Destroy all cached information for auto-loading and auto-execution, so that
#@ # the information gets recomputed the next time it's needed.  Also delete any
#@ # commands that are listed in the auto-load index.
#@ #
#@ # Arguments:
#@ # None.
#@ 
#@ proc auto_reset {} {
#@     global auto_execs auto_index auto_path
#@     if {[array exists auto_index]} {
#@ 	foreach cmdName [array names auto_index] {
#@ 	    set fqcn [namespace which $cmdName]
#@ 	    if {$fqcn eq ""} {
#@ 		continue
#@ 	    }
#@ 	    rename $fqcn {}
#@ 	}
#@     }
#@     unset -nocomplain auto_execs auto_index ::tcl::auto_oldpath
#@     if {[catch {llength $auto_path}]} {
#@ 	set auto_path [list [info library]]
#@     } elseif {[info library] ni $auto_path} {
#@ 	lappend auto_path [info library]
#@     }
#@ }
#@ 
#@ # tcl_findLibrary --
#@ #
#@ #	This is a utility for extensions that searches for a library directory
#@ #	using a canonical searching algorithm. A side effect is to source the
#@ #	initialization script and set a global library variable.
#@ #
#@ # Arguments:
#@ # 	basename	Prefix of the directory name, (e.g., "tk")
#@ #	version		Version number of the package, (e.g., "8.0")
#@ #	patch		Patchlevel of the package, (e.g., "8.0.3")
#@ #	initScript	Initialization script to source (e.g., tk.tcl)
#@ #	enVarName	environment variable to honor (e.g., TK_LIBRARY)
#@ #	varName		Global variable to set when done (e.g., tk_library)
#@ 
#@ proc tcl_findLibrary {basename version patch initScript enVarName varName} {
#@     upvar #0 $varName the_library
#@     global auto_path env tcl_platform
#@ 
#@     set dirs {}
#@     set errors {}
#@ 
#@     # The C application may have hardwired a path, which we honor
#@ 
#@     if {[info exists the_library] && $the_library ne ""} {
#@ 	lappend dirs $the_library
#@     } else {
#@ 	# Do the canonical search
#@ 
#@ 	# 1. From an environment variable, if it exists.  Placing this first
#@ 	#    gives the end-user ultimate control to work-around any bugs, or
#@ 	#    to customize.
#@ 
#@         if {[info exists env($enVarName)]} {
#@             lappend dirs $env($enVarName)
#@         }
#@ 
#@ 	# 2. In the package script directory registered within the
#@ 	#    configuration of the package itself.
#@ 
#@ 	catch {
#@ 	    lappend dirs [::${basename}::pkgconfig get scriptdir,runtime]
#@ 	}
#@ 
#@ 	# 3. Relative to auto_path directories.  This checks relative to the
#@ 	# Tcl library as well as allowing loading of libraries added to the
#@ 	# auto_path that is not relative to the core library or binary paths.
#@ 	foreach d $auto_path {
#@ 	    lappend dirs [file join $d $basename$version]
#@ 	    if {$tcl_platform(platform) eq "unix"
#@ 		    && $tcl_platform(os) eq "Darwin"} {
#@ 		# 4. On MacOSX, check the Resources/Scripts subdir too
#@ 		lappend dirs [file join $d $basename$version Resources Scripts]
#@ 	    }
#@ 	}
#@ 
#@ 	# 3. Various locations relative to the executable
#@ 	# ../lib/foo1.0		(From bin directory in install hierarchy)
#@ 	# ../../lib/foo1.0	(From bin/arch directory in install hierarchy)
#@ 	# ../library		(From unix directory in build hierarchy)
#@ 	#
#@ 	# Remaining locations are out of date (when relevant, they ought to be
#@ 	# covered by the $::auto_path seach above) and disabled.
#@ 	#
#@ 	# ../../library		(From unix/arch directory in build hierarchy)
#@ 	# ../../foo1.0.1/library
#@ 	#		(From unix directory in parallel build hierarchy)
#@ 	# ../../../foo1.0.1/library
#@ 	#		(From unix/arch directory in parallel build hierarchy)
#@ 
#@         set parentDir [file dirname [file dirname [info nameofexecutable]]]
#@         set grandParentDir [file dirname $parentDir]
#@         lappend dirs [file join $parentDir lib $basename$version]
#@         lappend dirs [file join $grandParentDir lib $basename$version]
#@         lappend dirs [file join $parentDir library]
#@ 	if {0} {
#@ 	    lappend dirs [file join $grandParentDir library]
#@ 	    lappend dirs [file join $grandParentDir $basename$patch library]
#@ 	    lappend dirs [file join [file dirname $grandParentDir] 			      $basename$patch library]
#@ 	}
#@     }
#@     # uniquify $dirs in order
#@     array set seen {}
#@     foreach i $dirs {
#@ 	# Take note that the [file normalize] below has been noted to cause
#@ 	# difficulties for the freewrap utility.  See Bug 1072136.  Until
#@ 	# freewrap resolves the matter, one might work around the problem by
#@ 	# disabling that branch.
#@ 	if {[interp issafe]} {
#@ 	    set norm $i
#@ 	} else {
#@ 	    set norm [file normalize $i]
#@ 	}
#@ 	if {[info exists seen($norm)]} {
#@ 	    continue
#@ 	}
#@ 	set seen($norm) {}
#@ 	lappend uniqdirs $i
#@     }
#@     set dirs $uniqdirs
#@     foreach i $dirs {
#@         set the_library $i
#@         set file [file join $i $initScript]
#@ 
#@ 	# source everything when in a safe interpreter because we have a
#@ 	# source command, but no file exists command
#@ 
#@         if {[interp issafe] || [file exists $file]} {
#@             if {![catch {uplevel #0 [list source $file]} msg opts]} {
#@                 return
#@             }
#@ 	    append errors "$file: $msg\n"
#@ 	    append errors [dict get $opts -errorinfo]\n
#@         }
#@     }
#@     unset -nocomplain the_library
#@     set msg "Can't find a usable $initScript in the following directories: \n"
#@     append msg "    $dirs\n\n"
#@     append msg "$errors\n\n"
#@     append msg "This probably means that $basename wasn't installed properly.\n"
#@     error $msg
#@ }
#@ 
#@ 
#@ # ----------------------------------------------------------------------
#@ # auto_mkindex
#@ # ----------------------------------------------------------------------
#@ # The following procedures are used to generate the tclIndex file from Tcl
#@ # source files.  They use a special safe interpreter to parse Tcl source
#@ # files, writing out index entries as "proc" commands are encountered.  This
#@ # implementation won't work in a safe interpreter, since a safe interpreter
#@ # can't create the special parser and mess with its commands.
#@ 
#@ if {[interp issafe]} {
#@     return	;# Stop sourcing the file here
#@ }
#@ 
#@ # auto_mkindex --
#@ # Regenerate a tclIndex file from Tcl source files.  Takes as argument the
#@ # name of the directory in which the tclIndex file is to be placed, followed
#@ # by any number of glob patterns to use in that directory to locate all of the
#@ # relevant files.
#@ #
#@ # Arguments:
#@ # dir -		Name of the directory in which to create an index.
#@ 
#@ # args -	Any number of additional arguments giving the names of files
#@ #		within dir.  If no additional are given auto_mkindex will look
#@ #		for *.tcl.
#@ 
#@ proc auto_mkindex {dir args} {
#@     if {[interp issafe]} {
#@         error "can't generate index within safe interpreter"
#@     }
#@ 
#@     set oldDir [pwd]
#@     cd $dir
#@ 
#@     append index "# Tcl autoload index file, version 2.0\n"
#@     append index "# This file is generated by the \"auto_mkindex\" command\n"
#@     append index "# and sourced to set up indexing information for one or\n"
#@     append index "# more commands.  Typically each line is a command that\n"
#@     append index "# sets an element in the auto_index array, where the\n"
#@     append index "# element name is the name of a command and the value is\n"
#@     append index "# a script that loads the command.\n\n"
#@     if {![llength $args]} {
#@ 	set args *.tcl
#@     }
#@ 
#@     auto_mkindex_parser::init
#@     foreach file [glob -- {*}$args] {
#@ 	try {
#@ 	    append index [auto_mkindex_parser::mkindex $file]
#@ 	} on error {msg opts} {
#@ 	    cd $oldDir
#@ 	    return -options $opts $msg
#@ 	}
#@     }
#@     auto_mkindex_parser::cleanup
#@ 
#@     set fid [open "tclIndex" w]
#@     puts -nonewline $fid $index
#@     close $fid
#@     cd $oldDir
#@ }
#@ 
#@ # Original version of auto_mkindex that just searches the source code for
#@ # "proc" at the beginning of the line.
#@ 
#@ proc auto_mkindex_old {dir args} {
#@     set oldDir [pwd]
#@     cd $dir
#@     set dir [pwd]
#@     append index "# Tcl autoload index file, version 2.0\n"
#@     append index "# This file is generated by the \"auto_mkindex\" command\n"
#@     append index "# and sourced to set up indexing information for one or\n"
#@     append index "# more commands.  Typically each line is a command that\n"
#@     append index "# sets an element in the auto_index array, where the\n"
#@     append index "# element name is the name of a command and the value is\n"
#@     append index "# a script that loads the command.\n\n"
#@     if {![llength $args]} {
#@ 	set args *.tcl
#@     }
#@     foreach file [glob -- {*}$args] {
#@ 	set f ""
#@ 	set error [catch {
#@ 	    set f [open $file]
#@ 	    while {[gets $f line] >= 0} {
#@ 		if {[regexp {^proc[ 	]+([^ 	]*)} $line match procName]} {
#@ 		    set procName [lindex [auto_qualify $procName "::"] 0]
#@ 		    append index "set [list auto_index($procName)]"
#@ 		    append index " \[list source \[file join \$dir [list $file]\]\]\n"
#@ 		}
#@ 	    }
#@ 	    close $f
#@ 	} msg opts]
#@ 	if {$error} {
#@ 	    catch {close $f}
#@ 	    cd $oldDir
#@ 	    return -options $opts $msg
#@ 	}
#@     }
#@     set f ""
#@     set error [catch {
#@ 	set f [open tclIndex w]
#@ 	puts -nonewline $f $index
#@ 	close $f
#@ 	cd $oldDir
#@     } msg opts]
#@     if {$error} {
#@ 	catch {close $f}
#@ 	cd $oldDir
#@ 	error $msg $info $code
#@ 	return -options $opts $msg
#@     }
#@ }
#@ 
#@ # Create a safe interpreter that can be used to parse Tcl source files
#@ # generate a tclIndex file for autoloading.  This interp contains commands for
#@ # things that need index entries.  Each time a command is executed, it writes
#@ # an entry out to the index file.
#@ 
#@ namespace eval auto_mkindex_parser {
#@     variable parser ""          ;# parser used to build index
#@     variable index ""           ;# maintains index as it is built
#@     variable scriptFile ""      ;# name of file being processed
#@     variable contextStack ""    ;# stack of namespace scopes
#@     variable imports ""         ;# keeps track of all imported cmds
#@     variable initCommands       ;# list of commands that create aliases
#@     if {![info exists initCommands]} {
#@ 	set initCommands [list]
#@     }
#@ 
#@     proc init {} {
#@ 	variable parser
#@ 	variable initCommands
#@ 
#@ 	if {![interp issafe]} {
#@ 	    set parser [interp create -safe]
#@ 	    $parser hide info
#@ 	    $parser hide rename
#@ 	    $parser hide proc
#@ 	    $parser hide namespace
#@ 	    $parser hide eval
#@ 	    $parser hide puts
#@ 	    foreach ns [$parser invokehidden namespace children ::] {
#@ 		# MUST NOT DELETE "::tcl" OR BAD THINGS HAPPEN!
#@ 		if {$ns eq "::tcl"} continue
#@ 		$parser invokehidden namespace delete $ns
#@ 	    }
#@ 	    foreach cmd [$parser invokehidden info commands ::*] {
#@ 		$parser invokehidden rename $cmd {}
#@ 	    }
#@ 	    $parser invokehidden proc unknown {args} {}
#@ 
#@ 	    # We'll need access to the "namespace" command within the
#@ 	    # interp.  Put it back, but move it out of the way.
#@ 
#@ 	    $parser expose namespace
#@ 	    $parser invokehidden rename namespace _%@namespace
#@ 	    $parser expose eval
#@ 	    $parser invokehidden rename eval _%@eval
#@ 
#@ 	    # Install all the registered psuedo-command implementations
#@ 
#@ 	    foreach cmd $initCommands {
#@ 		eval $cmd
#@ 	    }
#@ 	}
#@     }
#@     proc cleanup {} {
#@ 	variable parser
#@ 	interp delete $parser
#@ 	unset parser
#@     }
#@ }
#@ 
#@ # auto_mkindex_parser::mkindex --
#@ #
#@ # Used by the "auto_mkindex" command to create a "tclIndex" file for the given
#@ # Tcl source file.  Executes the commands in the file, and handles things like
#@ # the "proc" command by adding an entry for the index file.  Returns a string
#@ # that represents the index file.
#@ #
#@ # Arguments:
#@ #	file	Name of Tcl source file to be indexed.
#@ 
#@ proc auto_mkindex_parser::mkindex {file} {
#@     variable parser
#@     variable index
#@     variable scriptFile
#@     variable contextStack
#@     variable imports
#@ 
#@     set scriptFile $file
#@ 
#@     set fid [open $file]
#@     set contents [read $fid]
#@     close $fid
#@ 
#@     # There is one problem with sourcing files into the safe interpreter:
#@     # references like "$x" will fail since code is not really being executed
#@     # and variables do not really exist.  To avoid this, we replace all $ with
#@     # \0 (literally, the null char) later, when getting proc names we will
#@     # have to reverse this replacement, in case there were any $ in the proc
#@     # name.  This will cause a problem if somebody actually tries to have a \0
#@     # in their proc name.  Too bad for them.
#@     set contents [string map [list \$ \0] $contents]
#@ 
#@     set index ""
#@     set contextStack ""
#@     set imports ""
#@ 
#@     $parser eval $contents
#@ 
#@     foreach name $imports {
#@         catch {$parser eval [list _%@namespace forget $name]}
#@     }
#@     return $index
#@ }
#@ 
#@ # auto_mkindex_parser::hook command
#@ #
#@ # Registers a Tcl command to evaluate when initializing the slave interpreter
#@ # used by the mkindex parser.  The command is evaluated in the master
#@ # interpreter, and can use the variable auto_mkindex_parser::parser to get to
#@ # the slave
#@ 
#@ proc auto_mkindex_parser::hook {cmd} {
#@     variable initCommands
#@ 
#@     lappend initCommands $cmd
#@ }
#@ 
#@ # auto_mkindex_parser::slavehook command
#@ #
#@ # Registers a Tcl command to evaluate when initializing the slave interpreter
#@ # used by the mkindex parser.  The command is evaluated in the slave
#@ # interpreter.
#@ 
#@ proc auto_mkindex_parser::slavehook {cmd} {
#@     variable initCommands
#@ 
#@     # The $parser variable is defined to be the name of the slave interpreter
#@     # when this command is used later.
#@ 
#@     lappend initCommands "\$parser eval [list $cmd]"
#@ }
#@ 
#@ # auto_mkindex_parser::command --
#@ #
#@ # Registers a new command with the "auto_mkindex_parser" interpreter that
#@ # parses Tcl files.  These commands are fake versions of things like the
#@ # "proc" command.  When you execute them, they simply write out an entry to a
#@ # "tclIndex" file for auto-loading.
#@ #
#@ # This procedure allows extensions to register their own commands with the
#@ # auto_mkindex facility.  For example, a package like [incr Tcl] might
#@ # register a "class" command so that class definitions could be added to a
#@ # "tclIndex" file for auto-loading.
#@ #
#@ # Arguments:
#@ #	name 	Name of command recognized in Tcl files.
#@ #	arglist	Argument list for command.
#@ #	body 	Implementation of command to handle indexing.
#@ 
#@ proc auto_mkindex_parser::command {name arglist body} {
#@     hook [list auto_mkindex_parser::commandInit $name $arglist $body]
#@ }
#@ 
#@ # auto_mkindex_parser::commandInit --
#@ #
#@ # This does the actual work set up by auto_mkindex_parser::command. This is
#@ # called when the interpreter used by the parser is created.
#@ #
#@ # Arguments:
#@ #	name 	Name of command recognized in Tcl files.
#@ #	arglist	Argument list for command.
#@ #	body 	Implementation of command to handle indexing.
#@ 
#@ proc auto_mkindex_parser::commandInit {name arglist body} {
#@     variable parser
#@ 
#@     set ns [namespace qualifiers $name]
#@     set tail [namespace tail $name]
#@     if {$ns eq ""} {
#@         set fakeName [namespace current]::_%@fake_$tail
#@     } else {
#@         set fakeName [namespace current]::[string map {:: _} _%@fake_$name]
#@     }
#@     proc $fakeName $arglist $body
#@ 
#@     # YUK!  Tcl won't let us alias fully qualified command names, so we can't
#@     # handle names like "::itcl::class".  Instead, we have to build procs with
#@     # the fully qualified names, and have the procs point to the aliases.
#@ 
#@     if {[string match *::* $name]} {
#@         set exportCmd [list _%@namespace export [namespace tail $name]]
#@         $parser eval [list _%@namespace eval $ns $exportCmd]
#@ 
#@ 	# The following proc definition does not work if you want to tolerate
#@ 	# space or something else diabolical in the procedure name, (i.e.,
#@ 	# space in $alias). The following does not work:
#@ 	#   "_%@eval {$alias} \$args"
#@ 	# because $alias gets concat'ed to $args.  The following does not work
#@ 	# because $cmd is somehow undefined
#@ 	#   "set cmd {$alias} \; _%@eval {\$cmd} \$args"
#@ 	# A gold star to someone that can make test autoMkindex-3.3 work
#@ 	# properly
#@ 
#@         set alias [namespace tail $fakeName]
#@         $parser invokehidden proc $name {args} "_%@eval {$alias} \$args"
#@         $parser alias $alias $fakeName
#@     } else {
#@         $parser alias $name $fakeName
#@     }
#@     return
#@ }
#@ 
#@ # auto_mkindex_parser::fullname --
#@ #
#@ # Used by commands like "proc" within the auto_mkindex parser.  Returns the
#@ # qualified namespace name for the "name" argument.  If the "name" does not
#@ # start with "::", elements are added from the current namespace stack to
#@ # produce a qualified name.  Then, the name is examined to see whether or not
#@ # it should really be qualified.  If the name has more than the leading "::",
#@ # it is returned as a fully qualified name.  Otherwise, it is returned as a
#@ # simple name.  That way, the Tcl autoloader will recognize it properly.
#@ #
#@ # Arguments:
#@ # name -		Name that is being added to index.
#@ 
#@ proc auto_mkindex_parser::fullname {name} {
#@     variable contextStack
#@ 
#@     if {![string match ::* $name]} {
#@         foreach ns $contextStack {
#@             set name "${ns}::$name"
#@             if {[string match ::* $name]} {
#@                 break
#@             }
#@         }
#@     }
#@ 
#@     if {[namespace qualifiers $name] eq ""} {
#@         set name [namespace tail $name]
#@     } elseif {![string match ::* $name]} {
#@         set name "::$name"
#@     }
#@ 
#@     # Earlier, mkindex replaced all $'s with \0.  Now, we have to reverse that
#@     # replacement.
#@     return [string map [list \0 \$] $name]
#@ }
#@ 
#@ # auto_mkindex_parser::indexEntry --
#@ #
#@ # Used by commands like "proc" within the auto_mkindex parser to add a
#@ # correctly-quoted entry to the index. This is shared code so it is done
#@ # *right*, in one place.
#@ #
#@ # Arguments:
#@ # name -		Name that is being added to index.
#@ 
#@ proc auto_mkindex_parser::indexEntry {name} {
#@     variable index
#@     variable scriptFile
#@ 
#@     # We convert all metacharacters to their backslashed form, and pre-split
#@     # the file name that we know about (which will be a proper list, and so
#@     # correctly quoted).
#@ 
#@     set name [string range [list \}[fullname $name]] 2 end]
#@     set filenameParts [file split $scriptFile]
#@ 
#@     append index [format 	    {set auto_index(%s) [list source [file join $dir %s]]%s} 	    $name $filenameParts \n]
#@     return
#@ }
#@ 
#@ if {[llength $::auto_mkindex_parser::initCommands]} {
#@     return
#@ }
#@ 
#@ # Register all of the procedures for the auto_mkindex parser that will build
#@ # the "tclIndex" file.
#@ 
#@ # AUTO MKINDEX:  proc name arglist body
#@ # Adds an entry to the auto index list for the given procedure name.
#@ 
#@ auto_mkindex_parser::command proc {name args} {
#@     indexEntry $name
#@ }
#@ 
#@ # Conditionally add support for Tcl byte code files.  There are some tricky
#@ # details here.  First, we need to get the tbcload library initialized in the
#@ # current interpreter.  We cannot load tbcload into the slave until we have
#@ # done so because it needs access to the tcl_patchLevel variable.  Second,
#@ # because the package index file may defer loading the library until we invoke
#@ # a command, we need to explicitly invoke auto_load to force it to be loaded.
#@ # This should be a noop if the package has already been loaded
#@ 
#@ auto_mkindex_parser::hook {
#@     try {
#@ 	package require tbcload
#@     } on error {} {
#@ 	# OK, don't have it so do nothing
#@     } on ok {} {
#@ 	if {[namespace which -command tbcload::bcproc] eq ""} {
#@ 	    auto_load tbcload::bcproc
#@ 	}
#@         if {[info commands load] == "load"} {
#@ 	    load {} tbcload $auto_mkindex_parser::parser
#@         }
#@ 
#@ 	# AUTO MKINDEX:  tbcload::bcproc name arglist body
#@ 	# Adds an entry to the auto index list for the given pre-compiled
#@ 	# procedure name.
#@ 
#@ 	auto_mkindex_parser::commandInit tbcload::bcproc {name args} {
#@ 	    indexEntry $name
#@ 	}
#@     }
#@ }
#@ 
#@ # AUTO MKINDEX:  namespace eval name command ?arg arg...?
#@ # Adds the namespace name onto the context stack and evaluates the associated
#@ # body of commands.
#@ #
#@ # AUTO MKINDEX:  namespace import ?-force? pattern ?pattern...?
#@ # Performs the "import" action in the parser interpreter.  This is important
#@ # for any commands contained in a namespace that affect the index.  For
#@ # example, a script may say "itcl::class ...", or it may import "itcl::*" and
#@ # then say "class ...".  This procedure does the import operation, but keeps
#@ # track of imported patterns so we can remove the imports later.
#@ 
#@ auto_mkindex_parser::command namespace {op args} {
#@     switch -- $op {
#@         eval {
#@             variable parser
#@             variable contextStack
#@ 
#@             set name [lindex $args 0]
#@             set args [lrange $args 1 end]
#@ 
#@             set contextStack [linsert $contextStack 0 $name]
#@ 	    $parser eval [list _%@namespace eval $name] $args
#@             set contextStack [lrange $contextStack 1 end]
#@         }
#@         import {
#@             variable parser
#@             variable imports
#@             foreach pattern $args {
#@                 if {$pattern ne "-force"} {
#@                     lappend imports $pattern
#@                 }
#@             }
#@             catch {$parser eval "_%@namespace import $args"}
#@         }
#@ 	ensemble {
#@ 	    variable parser
#@ 	    variable contextStack
#@ 	    if {[lindex $args 0] eq "create"} {
#@ 		set name ::[join [lreverse $contextStack] ::]
#@ 		catch {
#@ 		    set name [dict get [lrange $args 1 end] -command]
#@ 		    if {![string match ::* $name]} {
#@ 			set name ::[join [lreverse $contextStack] ::]$name
#@ 		    }
#@ 		    regsub -all ::+ $name :: name
#@ 		}
#@ 		# create artifical proc to force an entry in the tclIndex
#@ 		$parser eval [list ::proc $name {} {}]
#@ 	    }
#@ 	}
#@     }
#@ }
#@ 
#@ # AUTO MKINDEX:  oo::class create name ?definition?
#@ # Adds an entry to the auto index list for the given class name.
#@ auto_mkindex_parser::command oo::class {op name {body ""}} {
#@     if {$op eq "create"} {
#@ 	indexEntry $name
#@     }
#@ }
#@ auto_mkindex_parser::command class {op name {body ""}} {
#@     if {$op eq "create"} {
#@ 	indexEntry $name
#@     }
#@ }
#@ 
#@ return
#@ # -- End source /tools/synopsys_18/pts/O-2018.06-SP4/auxx/tcllib/lib/tcl8.6/auto.tcl

#@ 
#@ #
#@ # USAGE:  itcl::body name arglist body
#@ # Adds an entry for the given method/proc body.
#@ #
#@ foreach __cmd {itcl::body body} {
#@     auto_mkindex_parser::command $__cmd {name arglist body} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@     }
#@ }
#@ 
#@ #
#@ # USAGE:  itcl::configbody name arglist body
#@ # Adds an entry for the given method/proc body.
#@ #
#@ foreach __cmd {itcl::configbody configbody} {
#@     auto_mkindex_parser::command $__cmd {name body} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@     }
#@ }
#@ 
#@ #
#@ # USAGE:  ensemble name ?body?
#@ # Adds an entry to the auto index list for the given ensemble name.
#@ #
#@ foreach __cmd {itcl::ensemble ensemble} {
#@     auto_mkindex_parser::command $__cmd {name {body ""}} {
#@ 	variable index
#@ 	variable scriptFile
#@ 	append index "set [list auto_index([fullname $name])]"
#@ 	append index " \[list source \[file join \$dir [list $scriptFile]\]\]\n"
#@     }
#@ }
#@ 
#@ #
#@ # USAGE:  public arg ?arg arg...?
#@ #         protected arg ?arg arg...?
#@ #         private arg ?arg arg...?
#@ #
#@ # Evaluates the arguments as commands, so we can recognize proc
#@ # declarations within classes.
#@ #
#@ foreach __cmd {public protected private} {
#@     auto_mkindex_parser::command $__cmd {args} {
#@         variable parser
#@         $parser eval $args
#@     }
#@ }
#@ 
#@ # SF bug #246 unset variable __cmd to avoid problems in user programs!!
#@ unset __cmd
#@ 
#@ # ----------------------------------------------------------------------
#@ # auto_import
#@ # ----------------------------------------------------------------------
#@ # This procedure overrides the usual "auto_import" function in the
#@ # Tcl library.  It is invoked during "namespace import" to make see
#@ # if the imported commands reside in an autoloaded library.  If so,
#@ # stubs are created to represent the commands.  Executing a stub
#@ # later on causes the real implementation to be autoloaded.
#@ #
#@ # Arguments -
#@ # pattern	The pattern of commands being imported (like "foo::*")
#@ #               a canonical namespace as returned by [namespace current]
#@ 
#@ proc auto_import {pattern} {
#@     global auto_index
#@ 
#@     set ns [uplevel namespace current]
#@     set patternList [auto_qualify $pattern $ns]
#@ 
#@     auto_load_index
#@ 
#@     foreach pattern $patternList {
#@         foreach name [array names auto_index $pattern] {
#@             if {"" == [info commands $name]} {
#@                 ::itcl::import::stub create $name
#@             }
#@         }
#@     }
#@ }
#@ # -- End source /tools/synopsys_18/pts/O-2018.06-SP4/auxx/tcllib/lib/itcl4.0.2/itcl.tcl

source ./tcl_scripts/evaluate.tcl
#@ # -- Starting source ./tcl_scripts/evaluate.tcl

#@ set blockName "c1908"
#@ set allowed_slack -0.5
#@ 
#@ source ./tcl_scripts/pt_analysis.tcl
#@ # -- Starting source ./tcl_scripts/pt_analysis.tcl

#@ ##	+----------------------------------------------------------------
#@ ##	|		 Synthesis and Optimization of Digital Circuits			|
#@ ##	|				Politecnico di Torino - TO - Italy				|
#@ ##	|						DAUIN - EDA GROUP						|
#@ ##	+----------------------------------------------------------------
#@ ##	|	author: andrea calimera										|
#@ ##	|	mail:	andrea.calimera@polito.it							|
#@ ##	|	title:	pt_analysis.tcl										|
#@ ##	+----------------------------------------------------------------
#@ ##	| 	Copyright 2015 DAUIN - EDA GROUP							|
#@ ##	+----------------------------------------------------------------
#@ 
#@ ######################################################################
#@ ##
#@ ## SPECIFY LIBRARIES
#@ ##
#@ ######################################################################
#@ 
#@ # SOURCE SETUP FILE
#@ source "./tech/STcmos65/synopsys_pt.setup"
#@ # -- Starting source ./tech/STcmos65/synopsys_pt.setup

#@ set technology "STcmos65"
#@ set search_path ""
#@ lappend search_path "./tech/${technology}"
#@ 
#@ set libraries ""
#@ lappend libraries "CORE65LPSVT_bc_1.30V_m40C.db"
#@ lappend libraries "CORE65LPSVT_wc_1.10V_125C.db"
#@ lappend libraries "CORE65LPSVT_nom_1.20V_25C.db"
#@ lappend libraries "CORE65LPLVT_nom_1.20V_25C.db"
#@ lappend libraries "CORE65LPHVT_nom_1.20V_25C.db"
#@ 
#@ set link_library [lindex $libraries 3]
#@ lappend link_library [lindex $libraries 4]
#@ # -- End source ./tech/STcmos65/synopsys_pt.setup

#@ 
#@ # DEFINE OPTIONS
#@ set report_default_significant_digits 6
#@ set power_enable_analysis true
#@ 
#@ # SUPPRESS WARNING MESSAGES
#@ suppress_message RC-004
#@ suppress_message PTE-003
#@ suppress_message UID-401
#@ suppress_message ENV-003
#@ suppress_message UITE-489
#@ suppress_message CMD-041
#@ suppress_message PWR-601
#@ suppress_message PWR-602
#@ suppress_message PWR-246
#@ suppress_message SEL-002
#@ suppress_message PTE-139
#@ suppress_message LNK-041
#@ ######################################################################
#@ ##
#@ ## READ DESIGN
#@ ##
#@ ######################################################################
#@ # DEFINE CIRCUITS
#@ 
#@ 
#@ proc pt_init {blockName} {
#@ 
#@ 
#@      #set blockName "aes_cipher_top"
#@ 
#@     # DEFINE INPUT FILES
#@     set dir "./saved/${blockName}/synthesis"
#@     set in_verilog_filename "${dir}/${blockName}_postsyn.v"
#@     set in_sdc_filename "${dir}/${blockName}_postsyn.sdc"
#@ 
#@     # READ
#@     read_verilog $in_verilog_filename
#@     read_sdc -version 1.3 $in_sdc_filename
#@ 
#@ 
#@     update_timing -full
#@ 
#@     ######################################################################
#@     ##
#@     ## TIMING ANALYSIS
#@     ##
#@     ######################################################################
#@     # SETUP TIME
#@     #report_timing -delay_type max
#@ 
#@     # SLACK CONDITION
#@     #report_timing -delay_type min -slack_lesser_than 0.1 -max_paths 2
#@     #report_timing -delay_type max -slack_lesser_than 0.0 -max_paths 2
#@ 
#@     ######################################################################
#@     ##
#@     ## POWER ANALYSIS
#@     ##
#@     ######################################################################
#@ 
#@     #report_power
#@ 
#@     ######################################################################
#@     ##
#@     ## WRITE REPORTS
#@     ##
#@     ######################################################################
#@ 
#@     # SET REPORT FILE NAME
#@     # set timing_rpt "${dir}/${blockName}_postsyn_timing.rpt"
#@     # set power_rpt "${dir}/${blockName}_postsyn_power.rpt"
#@ 
#@     # TIMING REPORT
#@     #report_timing > $timing_rpt
#@ 
#@     # POWER REPORT
#@     #report_power > $power_rpt
#@ 
#@     # ENABLE SLACK and ARRIVAL TIME ANNOTATION
#@     set timing_save_pin_arrival_and_slack true
#@     ######################################################################
#@     ##
#@     ## EXIT
#@     ##
#@     ######################################################################
#@     #exit
#@     set_user_attribute [find library CORE65LPLVT] default_threshold_voltage_group LVT
#@     set_user_attribute [find library CORE65LPHVT] default_threshold_voltage_group HVT
#@    
#@ }
#@ # -- End source ./tcl_scripts/pt_analysis.tcl

#@ source ./tcl_scripts/dualVth.tcl
#@ # -- Starting source ./tcl_scripts/dualVth.tcl

#@ proc max args {
#@     set res -1
#@     foreach element [lindex $args 0] {
#@         if {$element > $res} {set res $element}
#@     }
#@     return $res
#@ }
#@ 
#@ proc get_cell_HVT {cell} {
#@ 	set type HVT
#@ 	set curr_cell_lib [get_lib_cell -o $cell]
#@ 	set curr_cell_lib_name [get_attribute $curr_cell_lib full_name]
#@ 	# puts $curr_cell_lib_name
#@ 	if { [ regexp {\/(.+)_.+_(.+)} $curr_cell_lib_name full1 name_orig name2_orig ] } {
#@         if { [get_attribute $curr_cell_lib threshold_voltage_group] != $type } {
#@ 
#@           foreach_in_collection alternative [get_alternative_lib_cells [get_cell $cell]] {
#@             set possible_swap_name [get_attribute $alternative full_name]
#@ 
#@             if { [ regexp {\/(.+)_.+_(.+)} $possible_swap_name full nm nm2 ] } {
#@               if { ($name_orig == $nm) && ($name2_orig == $nm2) && ([get_attribute $alternative threshold_voltage_group] == $type) } {
#@ 				
#@ 				# puts "get_cell_hvt: found $possible_swap_name from $curr_cell_lib_name"
#@ 				size_cell $cell $possible_swap_name
#@ 				# set curr_cell_lib [get_lib_cell -o $cell]
#@ 				# puts [get_attribute $curr_cell_lib threshold_voltage_group]
#@ 				# puts "Replaced $cell -> $curr_cell_lib_name with $possible_swap_name"
#@               }
#@             }
#@           }
#@         } else {
#@             # puts "Skipped $cell because already $type"
#@         }
#@     }
#@ 
#@ 	return $cell
#@ }
#@ 
#@ 
#@ proc get_cell_lower_size {cell} {
#@ 	set curr_cell_lib [get_lib_cell -o $cell]
#@ 	# list_attributes -application -class lib_cell
#@ 	set curr_cell_lib_name [get_attribute $curr_cell_lib full_name]
#@ 
#@ 	set replacement_name $curr_cell_lib_name
#@ 	puts "x"
#@ 	set replacement_dyn [get_attribute $cell leakage_power]
#@ 	puts "x"
#@ 
#@ 	if { [ regexp {\/.*X([0-9]+)} $curr_cell_lib_name full1 old_load] } {
#@ 
#@ 		set min_found -1
#@ 		foreach_in_collection alternative [get_alternative_lib_cells [get_cell $cell]] {
#@ 			set possible_swap_name [get_attribute $alternative full_name]
#@ 
#@ 			if { [ regexp {\/.*X([0-9]+)} $possible_swap_name full new_possible_load] } {
#@ 				if { ([get_attribute $alternative threshold_voltage_group] == [get_attribute $curr_cell_lib threshold_voltage_group]) } {
#@ 
#@ 					# puts "[get_attribute $alternative threshold_voltage_group] -- [get_attribute $curr_cell_lib threshold_voltage_group]"
#@ 					# puts "old load: $old_load. new possible load: $new_possible_load. min_found: $min_found"
#@ 					if { $old_load > $new_possible_load && $new_possible_load > $min_found } {
#@ 						set min_found $new_possible_load
#@ 						set replacement_name $possible_swap_name
#@ 						set replacement_dyn [get_attribute $alternative leakage_power]
#@ 					}
#@ 
#@ 				}
#@ 			}
#@ 		}
#@ 
#@ 		# if {$min_found != $old_load} {
#@ 		#	puts "Replaced $cell -> $curr_cell_lib_name with $replacement_name"
#@ 			# size_cell $cell $replacement_name
#@ 		#}
#@ 	}
#@ 
#@ 	return list[ $replacement_name $replacement_dyn]
#@ }
#@ 
#@ 
#@ proc report_timing_enh {} {
#@ 
#@     foreach_in_collection path [ get_timing_paths ] {
#@         
#@         set arrival 0
#@         foreach_in_collection tpoint [ get_attribute $path points ] {
#@ 
#@             set pin [ get_attribute $tpoint object ]
#@             set cell [ get_cell -of_object $pin ]
#@ 
#@             set full_name [ get_attribute $pin full_name ]
#@             set ref_name [ get_attribute $cell ref_name ]
#@             set delta [ expr [ get_attribute $tpoint arrival ] - $arrival ]
#@             set arrival [ get_attribute $tpoint arrival ]  
#@ 
#@             puts "$full_name\t\t\t\t$delta\t$arrival"    
#@ 
#@             
#@ 
#@         }
#@     }
#@ 
#@ }
#@ 
#@ proc is_ok_slack {allowed_slack} {
#@     set path_list [get_timing_paths -slack_greater_than -100 -slack_lesser_than $allowed_slack]
#@     set empty 1
#@     foreach_in_collection elem $path_list {
#@         puts $elem
#@         set empty 0
#@ 		break
#@     }
#@     return $empty
#@ }
#@ 
#@ proc compute_priority_leakage {cell} {
#@ 	
#@ 	############ ACTUAL CELL
#@ 	set cell_actual_leakage [get_attribute $cell leakage_power]
#@ 	# set cell_actual_delay [expr {$original_arrival - $previous_arrival}]
#@ 	set curr_cell_lib_name  [get_attribute [get_lib_cell -o $cell] full_name]
#@ 	set LVT_delay_max [get_attribute [get_timing_arcs -of_object $cell] delay_max]
#@ 
#@ 
#@ 	############ NEW CELL
#@ 
#@ 	set new_hvt_cell [get_cell_HVT $cell]
#@ 	
#@ 	set cell_new_leakage [get_attribute $new_hvt_cell leakage_power]
#@ 	# set curr_cell_lib_name2 [get_attribute [get_lib_cell -o $new_hvt_cell] full_name]
#@ 	set HVT_delay_max [get_attribute [get_timing_arcs -of_object $new_hvt_cell] delay_max]
#@ 
#@ 	set max_lvt_delay [max $LVT_delay_max]
#@ 	set max_hvt_delay [max $HVT_delay_max]
#@ 
#@ 
#@ 	# puts "[get_attribute $new_hvt_cell full_name] [get_attribute $cell full_name]"
#@ 	# puts "$curr_cell_lib_name $curr_cell_lib_name2"
#@ 
#@ 	# puts "hvt_cell: $new_hvt_cell"
#@ 	# puts "actual: $cell_actual_delay - delay: $LVT_delay_max"
#@ 	# puts "new: $new_hvt_cell - delay: $HVT_delay_max - max: [max $HVT_delay_max]"
#@ 	# puts "new: $cell - delay: $LVT_delay_max - max: [max $LVT_delay_max]"
#@ 
#@ 	size_cell $cell $curr_cell_lib_name 
#@ 
#@ 	set denominator [expr {$max_hvt_delay - $max_lvt_delay}]
#@ 	return [expr {($cell_actual_leakage - $cell_new_leakage) / $denominator}]
#@ }
#@ 
#@ proc compute_area {cell} {
#@ 	
#@ 	############ ACTUAL CELL
#@ 	set cell_actual_area [get_attribute $cell area]
#@ 	set cell_actual_dynpower [get_attribute $cell dynamic_power]
#@ 	
#@ 
#@ 	############ NEW CELL
#@ 	set new_hvt_cell [get_cell_HVT $cell]
#@ 	
#@ 	set cell_new_area [get_attribute $new_hvt_cell area]
#@ 	set cell_new_dynpower [get_attribute $new_hvt_cell dynamic_power]
#@ }
#@ 
#@ 
#@ proc start {allowed_slack} {
#@ 	# set cell_list [get_cell]
#@ 	# foreach_in_collection cell $cell_list {
#@ 	# 	# test example
#@ 	# 	get_cell_lower_size [get_cell $cell]
#@ 	# 	break
#@ 	# }	
#@ 
#@ 	set path_list [get_timing_paths -slack_greater_than -10 -max_paths 2000000]
#@ 	
#@ 	# foreach_in_collection path $path_list {
#@ 	# 	puts "[get_attribute $path slack]"
#@ 	# }
#@ 
#@ 	# set current_path [get_attribute [index_collection $path_list end] slack]
#@ 	set current_path [index_collection $path_list 0]
#@ 
#@ 	set priority {}
#@ 	foreach_in_collection timing_point [get_attribute $current_path points] {
#@ 
#@ 		set obj_type [get_attribute [get_attribute $timing_point object] object_class]
#@ 		
#@ 		if {$obj_type == "pin"} {
#@ 			set cell [ get_cell -of_object [get_attribute $timing_point object] ]
#@ 
#@ 			# puts [get_attribute $cell ref_name]
#@ 			# puts [get_attribute $cell leakage_power]
#@ 
#@ 			set priority_leakage 0
#@ 			if {[get_attribute [get_lib_cell -o $cell] threshold_voltage_group] == "LVT"} {
#@ 				set priority_leakage [compute_priority_leakage $cell]
#@ 			}
#@ 
#@ 			set priority [lappend priority [list $timing_point $priority_leakage]]
#@ 		}
#@ 		
#@ 	}
#@ 
#@ 	set priority [lsort -index 1 -decreasing -real $priority]
#@ 	puts $priority
#@ 
#@ 	foreach pair $priority {
#@ 
#@ 		set cell [ get_cell -of_object [get_attribute [lindex $pair 0] object] ]
#@ 		get_cell_HVT $cell
#@ 
#@ 		puts [is_ok_slack $allowed_slack]
#@ 
#@ 	}
#@ 
#@ }
#@ 
#@ 
#@ proc dualVth {args} {
#@ 	parse_proc_arguments -args $args results
#@ 	set allowed_slack $results(-allowed_slack)
#@ 
#@ 	#################################
#@ 	### INSERT YOUR COMMANDS HERE ###
#@ 	#################################
#@ 	report_timing_enh
#@ 	start $allowed_slack
#@ 
#@ 	return
#@ }
#@ 
#@ define_proc_attributes dualVth -info "Post-Synthesis Dual-Vth Cell Assignment and Gate Re-Sizing" -define_args {
#@ 	{-allowed_slack "allowed slack after the optimization (valid range [-OO, 0])" value float required}
#@ }
#@ # -- End source ./tcl_scripts/dualVth.tcl

#@ 
#@ proc check_slack {allowed_slack} {
#@     set path_list [get_timing_paths -slack_greater_than -100 -slack_lesser_than $allowed_slack]
#@     set empty 1
#@     foreach_in_collection elem $path_list {
#@         puts $elem
#@         set empty 0
#@     }
#@     return $empty
#@ }
#@ 
#@ proc get_area {} {
#@     set sum 0
#@     foreach_in_collection cell [get_cells] {
#@         set cell_area [get_attribute $cell area]
#@         set sum [ expr { $cell_area + $sum } ]
#@     }
#@     return $sum
#@ }
#@ 
#@ proc get_leakage {} {
#@     # Cell Leakage Power   = 4.150e-07   ( 0.09%)
#@     report_power > "power.rpt"
#@     set fp [open "power.rpt" r]
#@     set pwr_report [read $fp]
#@     close $fp
#@     if { [ regexp {Cell Leakage Power[ ]*=[ ]*([0-9\.\-e]+)} $pwr_report all_matches value ] } {
#@         return $value
#@     } else {
#@         puts "ERROR on Cell Internal Power"
#@         exit > "void"
#@     }
#@ }
#@ 
#@ proc get_dynamic {} {
#@     #   Net Switching Power  = 3.195e-04   (66.70%)
#@     #   Cell Internal Power  = 1.591e-04   (33.21%
#@     report_power > "power.rpt"
#@     set fp [open "power.rpt" r]
#@     set pwr_report [read $fp]
#@     close $fp
#@ 
#@     set sum 0
#@ 
#@     if { [ regexp {Net Switching Power[ ]*=[ ]*([0-9\.\-e]+)} $pwr_report all_matches value ] } {
#@         set sum [ expr { $sum + $value } ]
#@     } else {
#@         puts "not found"
#@         puts "ERROR on Cell Internal Power"
#@         exit > "void"
#@     }
#@ 
#@     if { [ regexp {Cell Internal Power[ ]*=[ ]*([0-9\.\-e]+)} $pwr_report all_matches value ] } {
#@         set sum [ expr { $sum + $value } ]
#@     } else {
#@         puts "ERROR on Cell Internal Power"
#@         exit > "void"
#@     }
#@     return $sum
#@ }
#@ 
#@ # Start the pt_shell by loading the blockName circuit
#@ pt_init $blockName
#@ 
#@ # Get starting point
#@ set initial_leakage [get_leakage]
#@ set initial_dynamic [get_dynamic]
#@ set initial_area [get_area]
#@ 
#@ # Call dualVth function
#@ set start [clock millisec]
#@ dualVth -allowed_slack $allowed_slack
#@ set end [clock millisec]
#@ 
#@ # Check that the slack is within the given constraint
#@ set empty [check_slack $allowed_slack]
#@ if { $empty == 1 } {
#@     set time [ expr { $end - $start } ]
#@     set final_leakage [get_leakage]
#@     set final_dynamic [get_dynamic]
#@     set final_area [get_area]
#@     set pleak_ratio [ expr { $initial_leakage / $final_leakage } ]
#@     set pdyn_ratio [ expr { $initial_dynamic / $final_dynamic } ]
#@     set area_ratio [ expr { $initial_area / $final_area } ]
#@     set points [ expr { ($area_ratio + $pleak_ratio + $pdyn_ratio) * ( 1 - ($time/(900 * 1000))) } ]
#@ 
#@     # Summary
#@     puts ""
#@     puts ""
#@     puts "------------------------"
#@     puts "RESULTS"
#@     puts ""
#@     puts "TIME:   $time ms"
#@     puts "P LEAK: $initial_leakage\/$final_leakage \t-> $pleak_ratio"
#@     puts "P DYN:  $initial_dynamic\/$final_dynamic \t-> $pdyn_ratio"
#@     puts "AREA:   $initial_area\/$final_area \t\t-> $area_ratio"
#@     puts ""
#@     puts "POINTS:  $points"
#@     puts ""
#@     puts "------------------------"
#@ } else {
#@     puts ""
#@     puts ""
#@     puts "------------------------"
#@     puts "ERROR: slack less than $allowed_slack"
#@     puts ""
#@     puts "------------------------"
#@ }
#@ exit 
